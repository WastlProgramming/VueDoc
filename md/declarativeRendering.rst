Deklaratives Rendering in Vue
====================================

Das deklarative Renderingsystem von Vue erleichtert den Aufbau komplexer Benutzeroberfl√§chen, indem es auf vertrauten HTML-basierten Templates basiert. Sie definieren die Struktur Ihrer Anwendung im Template, und Vue sorgt daf√ºr, dass diese aktualisiert wird, sobald sich die Daten √§ndern. Im Folgenden werden wir einige g√§ngige Ans√§tze zur Verwaltung des Zustands mithilfe der Kernfunktionen von Vue wie `ref` und `reactive` erkunden.

Werte mit `ref` setzen üß©
-----------------------------------------

In Vue ist `ref` eine Funktion, mit der Sie eine reaktive Referenz auf einen Wert erstellen k√∂nnen. Sie eignet sich ideal zur Verwaltung einfacher primitiver Werte wie Zeichenketten oder Zahlen und sorgt daf√ºr, dass Ihr Template aktualisiert wird, sobald sich der Wert √§ndert.

.. code-block:: vue

    <script setup>
    import { ref } from 'vue'
    
    const message = ref('Hallo Welt')
    </script>

    <template>
    <h1>{{ message }}</h1>
    </template>

Hier ist `message` eine reaktive Referenz auf die Zeichenkette `'Hallo Welt'`. Im Template wird der Inhalt von `{{ message }}` dynamisch aktualisiert, sobald sich der Wert von `message` √§ndert.

- *ref*: Die `ref`-Funktion wird verwendet, um ein reaktives Objekt zu erstellen, das einen Wert speichert. Wenn der Wert von `ref` aktualisiert wird, l√∂st Vue automatisch ein erneutes Rendern aller Teile des Templates aus, die diese Referenz verwenden.

Komplexe Zust√§nde mit `reactive` verfolgen üñäÔ∏è
-----------------------------------------------------------------

Wenn Sie komplexere Datenstrukturen wie Objekte oder Arrays verwalten m√ºssen, k√∂nnen Sie die `reactive`-Funktion von Vue verwenden. Diese Funktion gibt ein reaktives Proxy-Objekt zur√ºck, und alle seine Eigenschaften werden reaktiv verfolgt.

.. code-block:: vue

    <script setup>
    import { reactive, ref } from 'vue'

    const counter = reactive({ count: 0 })
    const message = ref('Hallo Welt!')
    </script>

    <template>
    <h1>{{ message }}</h1>
    <p>Der Z√§hlerstand ist: {{ counter.count }}</p>
    </template>

In diesem Beispiel verwendet das `counter`-Objekt `reactive`, um die Eigenschaft `count` zu verwalten. Die Variable `message` verwendet `ref`, um einen einfachen Wert zu speichern. Die Kombination aus `ref` und `reactive` erm√∂glicht es Ihnen, sowohl primitive als auch komplexe Zust√§nde in Ihren Komponenten einfach zu verwalten.

- *reactive*: Verwenden Sie `reactive`, wenn Sie mehrere Eigenschaften innerhalb eines Objekts verfolgen m√ºssen. Vue macht jede Eigenschaft automatisch reaktiv, sodass √Ñnderungen im DOM widergespiegelt werden.

Zusammenfassung ü§ì
-------------------------------------
- Verwenden Sie `ref` f√ºr primitive Werte und wenn Sie nur einen einzelnen Wert reaktiv speichern m√ºssen.
- Verwenden Sie `reactive` f√ºr Objekte und Arrays, wenn Sie mehrere Eigenschaften als einen Zustand verwalten m√ºssen.

Mit `ref` und `reactive` macht Vue den Aufbau reaktiver und wartbarer Komponenten einfach, sodass Ihre Benutzeroberfl√§che immer mit Ihren Daten synchron bleibt.